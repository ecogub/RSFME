
Special note for flux products:
Our instantaneous stream flux product is called "stream_flux_inst" during standard kernel 
processing, but its name changes to "stream_flux_inst_scaled" during postprocessing, when each value
is scaled by watershed area. Consider both of these variant names to refer to the same product wherever
you encounter them in our documentation. The same goes for "precip_flux_inst" and "precip_flux_inst_scaled".
More information about postprocessing code is included below.

Special note for versionless products:
Some of the datasets we retrieve are hosted as static files by their original data providers,
rather than as formally versioned and archived data entities. These products are given product
codes of the form "VERSIONLESSXXX", where X is an integer. This changes the way we check for
newly uploaded editions of those datasets, but it doesn't change much for you. Just note that
in some cases it may make the original provenance of the dataset a bit less clear. In a few
cases, we have received datasets from providers through personal correspondence, in which case they
are housed on a remote MacroSheds drive. Raw/retrieved datasets of this type will be made public
in a future MacroSheds data release.


This MacroSheds data product (precip_pchem_pflux__ms004) was generated from the following munged MacroSheds product(s):

precip_chemistry__VERSIONLESS002
ws_boundary__VERSIONLESS005
precipitation__VERSIONLESS006

Source data were retrieved from the following web page(s), static file(s), or web-API endpoint(s):

precip_chemistry__VERSIONLESS002:
MacroSheds drive; not yet public

ws_boundary__VERSIONLESS005:
MacroSheds drive; not yet public

precipitation__VERSIONLESS006:
MacroSheds drive; not yet public

Using these notes, our code on GitHub, and assuming you have a good bit of R programming experience,
you will ideally be able to piece together exactly how precip_pchem_pflux__ms004 was generated and regenerate it yourself.
That said, automated documentation like this is bound to have some errors and missing details until
we get all the kinks worked out, and in any case assembling all the code below into a usable script
won't be an easy task. Please contact us at mail@macrosheds.org if you're having trouble
navigating our docs.

Below you will find the "derive kernel" function(s) by which precip_pchem_pflux__ms004 was generated.
Note that MacroSheds products may have precursors that are themselves derived products. In some
cases, these derived precursors are named above and have their own separate documentation. In other
cases, derived precursors are generated from stand-alone derive kernels whose entire definition and
history can be displayed here. A stand-alone kernel might, for example, pull supplemental data
from a source other than its own network/domain. Here is the code for precip_pchem_pflux__ms004's derive kernel function,
and for any stand-alone precursor derive kernel function(s):

process_2_ms003 <- function (network, domain, prodname_ms) 
{
    locations <- site_data %>% filter(network == !!network, domain == 
        !!domain, site_type == "rain_gauge")
    crs <- unique(locations$CRS)
    if (length(crs) > 1) {
        stop("crs is not consistent for all sites, cannot convert location in\n             site_data to precip_gauge location product")
    }
    locations <- locations %>% sf::st_as_sf(coords = c("longitude", 
        "latitude"), crs = crs) %>% select(site_code)
    path <- glue("data/{n}/{d}/derived/{p}", n = network, d = domain, 
        p = prodname_ms)
    dir.create(path, recursive = TRUE)
    for (i in 1:nrow(locations)) {
        site_code <- pull(locations[i, ], site_code)
        sf::st_write(locations[i, ], glue("{p}/{s}", p = path, 
            s = site_code), driver = "ESRI Shapefile", delete_dsn = TRUE, 
            quiet = TRUE)
    }
}

process_2_ms004 <- function (network, domain, prodname_ms) 
{
    pchem_prodname_ms <- get_derive_ingredient(network = network, 
        domain = domain, prodname = "precip_chemistry")
    precip_prodname_ms <- get_derive_ingredient(network = network, 
        domain = domain, prodname = "precipitation")
    wb_prodname_ms <- get_derive_ingredient(network = network, 
        domain = domain, prodname = "ws_boundary")
    rg_prodname_ms <- get_derive_ingredient(network = network, 
        domain = domain, prodname = "precip_gauge_locations")
    precip_pchem_pflux_idw(pchem_prodname = pchem_prodname_ms, 
        precip_prodname = precip_prodname_ms, wb_prodname = wb_prodname_ms, 
        pgauge_prodname = rg_prodname_ms, prodname_ms = prodname_ms)
    return()
}

These were the arguments to that/those function(s):

network = 'krycklan'
domain = 'krycklan'
prodname_ms = 'precip_pchem_pflux__ms004'

Zero or more function definitions follow, depending on the number of munged products that
are precursors to precip_pchem_pflux__ms004:

This is the "munge kernel" function for precip_chemistry__VERSIONLESS002:

process_1_VERSIONLESS002 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}", n = network, 
        d = domain, p = prodname_ms, s = site_code)
    rawfile <- list.files(rawfile, full.names = TRUE)
    d <- read.csv(rawfile, stringsAsFactors = FALSE, colClasses = "character")
    colnames(d) <- str_remove_all(colnames(d), "Â")
    d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = list(Date = "%Y-%m-%d"), 
        datetime_tz = "Etc/GMT+2", site_code_col = "SiteID", 
        alt_site_code = list(Svartberget = "1"), data_cols = c(EC.µS.cm = "spCond", 
            pH...25.C. = "pH", TOC.mg.C.l = "TOC", NO2.N.µg.N.l = "NO2_N", 
            NH4.N.µg.N.l = "NH4_N", NO3.N.µg.N.l = "NO3_N", 
            tot.N.mg.N.l = "TN", SO4.SO4.µg.SO4.l = "SO4", PO4.P.µg.P.l = "PO4_P", 
            S.SO4.µg.S.l = "SO4_S", Cu.µg.l = "Cu", Cs.µg.l = "Cs", 
            Mn.µg.l = "Mn", Na.µg.l = "Na", Bi.µg.l = "Bi", 
            Co.µg.l = "Co", Cl.µg.l = "Cl", Cd.µg.l = "Cd", 
            Ca.µg.l = "Ca", Ce.µg.l = "Ce", B.µg.l = "B", 
            Br.µg.l = "Br", Be.µg.l = "Be", Cr.µg.l = "Cr", 
            P.µg.l = "P", Os.µg.l = "Os", Ru.µg.l = "Ru", 
            Nd.µg.l = "Nd", Ti.µg.l = "Ti", Tb.µg.l = "Tb", 
            Se.µg.l = "Se", Li.µg.l = "Li", Y.µg.l = "Y", 
            Nb.µg.l = "Nb", Tm.µg.l = "Tm", Sc.µg.l = "Sc", 
            Sm.µg.l = "Sm", V.µg.l = "V", Dy.µg.l = "Dy", 
            Te.µg.l = "Te", Rb.µg.l = "Rb", Ta.µg.l = "Ta", 
            Zn.µg.l = "Zn", Gd.µg.l = "Gd", Tl.µg.l = "Tl", 
            Lu.µg.l = "Lu", Si.µg.l = "Si", Mg.µg.l = "Mg", 
            F.µg.l = "F", U.µg.l = "U", Pt.µg.l = "Pt", Er.µg.l = "Er", 
            Zr.µg.l = "Zr", K.µg.l = "K", Hg.µg.l = "Hg", 
            Ho.µg.l = "Ho", Th.µg.l = "Th", I.µg.l = "I", 
            Fe.µg.l = "Fe", Au.µg.l = "Au", Ni.µg.l = "Ni", 
            Hf.µg.l = "Hf", Sn.µg.l = "Sn", Sr.µg.l = "Sr", 
            S.µg.l = "S", La.µg.l = "La", Ir.µg.l = "Ir", 
            Pd.µg.l = "Pb", Pb.µg.l = "Pd", Al.µg.l = "Al", 
            Ag.µg.l = "Ag", Ba.µg.l = "Ba", Ge.µg.l = "Ge", 
            Mo.µg.l = "Mo", Pr.µg.l = "Pr", As.µg.l = "As", 
            Yb.µg.l = "Yb", Sb.µg.l = "Sb", Eu.µg.l = "Eu", 
            Rh.µg.l = "Rh", W.µg.l = "W", Re.µg.l = "Re", 
            Ga.µg.l = "Ga"), data_col_pattern = "#V#", convert_to_BDL_flag = "<LOD", 
        is_sensor = FALSE)
    d <- ms_cast_and_reflag(d, variable_flags_bdl = "BDL", variable_flags_dirty = "DIRTY", 
        variable_flags_to_drop = "DROP")
    d <- ms_conversions(d, convert_units_from = c(NO2_N = "ug/l", 
        NO3_NO2_N = "ug/l", NH4_N = "ug/l", NO3_N = "ug/l", SO4 = "ug/l", 
        DIN = "ug/l", PO4_P = "ug/l", SO4_S = "ug/l", TP = "ug/l", 
        Cu = "ug/l", Cs = "ug/l", Mn = "ug/l", Na = "ug/l", Bi = "ug/l", 
        Co = "ug/l", Cl = "ug/l", Cd = "ug/l", Ca = "ug/l", Ce = "ug/l", 
        B = "ug/l", Br = "ug/l", Be = "ug/l", Cr = "ug/l", P = "ug/l", 
        Os = "ug/l", Ru = "ug/l", Nd = "ug/l", Ga = "ug/l", Gd = "ug/l", 
        Ti = "ug/l", Tb = "ug/l", Se = "ug/l", Li = "ug/l", Y = "ug/l", 
        Nb = "ug/l", Tm = "ug/l", Sc = "ug/l", Sm = "ug/l", Dy = "ug/l", 
        Te = "ug/l", Rb = "ug/l", Ta = "ug/l", Zn = "ug/l", Tl = "ug/l", 
        Lu = "ug/l", Si = "ug/l", Mg = "ug/l", F = "ug/l", U = "ug/l", 
        Pt = "ug/l", Er = "ug/l", Zr = "ug/l", K = "ug/l", Hg = "ug/l", 
        Ho = "ug/l", Th = "ug/l", I = "ug/l", Fe = "ug/l", Au = "ug/l", 
        Ni = "ug/l", Hf = "ug/l", Sn = "ug/l", Sr = "ug/l", S = "ug/l", 
        La = "ug/l", Ir = "ug/l", Pb = "ug/l", V = "ug/l", Pd = "ug/l", 
        Al = "ug/l", Ag = "ug/l", Ba = "ug/l", Ge = "ug/l", Mo = "ug/l", 
        Pr = "ug/l", As = "ug/l", Yb = "ug/l", Sb = "ug/l", Eu = "ug/l", 
        Rh = "ug/l", W = "ug/l", Re = "ug/l", CH4_C = "ug/l", 
        DIC = "ug/l", CO2_C = "ug/l"), convert_units_to = c(NO2_N = "mg/l", 
        NO3_NO2_N = "mg/l", NH4_N = "mg/l", NO3_N = "mg/l", SO4 = "mg/l", 
        DIN = "mg/l", PO4_P = "mg/l", SO4_S = "mg/l", TP = "mg/l", 
        Cu = "mg/l", Cs = "mg/l", Mn = "mg/l", Na = "mg/l", Bi = "mg/l", 
        Co = "mg/l", Cl = "mg/l", Cd = "mg/l", Ca = "mg/l", Ce = "mg/l", 
        B = "mg/l", Br = "mg/l", Be = "mg/l", Cr = "mg/l", P = "mg/l", 
        Os = "mg/l", Ru = "mg/l", Nd = "mg/l", Ga = "mg/l", Gd = "mg/l", 
        Ti = "mg/l", Tb = "mg/l", Se = "mg/l", Li = "mg/l", Y = "mg/l", 
        Nb = "mg/l", Tm = "mg/l", Sc = "mg/l", Sm = "mg/l", V = "mg/l", 
        Dy = "mg/l", Te = "mg/l", Rb = "mg/l", Ta = "mg/l", Zn = "mg/l", 
        Tl = "mg/l", Lu = "mg/l", Si = "mg/l", Mg = "mg/l", F = "mg/l", 
        U = "mg/l", Pt = "mg/l", Er = "mg/l", Zr = "mg/l", K = "mg/l", 
        Hg = "mg/l", Ho = "mg/l", Th = "mg/l", I = "mg/l", Fe = "mg/l", 
        Au = "mg/l", Ni = "mg/l", Hf = "mg/l", Sn = "mg/l", Sr = "mg/l", 
        S = "mg/l", La = "mg/l", Ir = "mg/l", Pb = "mg/l", Pd = "mg/l", 
        Al = "mg/l", Ag = "mg/l", Ba = "mg/l", Ge = "mg/l", Mo = "mg/l", 
        Pr = "mg/l", As = "mg/l", Yb = "mg/l", Sb = "mg/l", Eu = "mg/l", 
        Rh = "mg/l", W = "mg/l", Re = "mg/l", CH4_C = "mg/l", 
        DIC = "mg/l", CO2_C = "mg/l"), keep_molecular = "SO4")
    d <- qc_hdetlim_and_uncert(d, prodname_ms = prodname_ms)
    d <- synchronize_timestep(d)
    sites <- unique(d$site_code)
    for (s in 1:length(sites)) {
        d_site <- d %>% filter(site_code == !!sites[s])
        write_ms_file(d = d_site, network = network, domain = domain, 
            prodname_ms = prodname_ms, site_code = sites[s], 
            level = "munged", shapefile = FALSE)
    }
    return()
}

These were the arguments to that function:

network = 'krycklan'
domain = 'krycklan'
prodname_ms = 'precip_chemistry__VERSIONLESS002'
site_code = <separately, each of: 'sitecode_NA', with corresponding component>
component(s) = 
	for site: sitecode_NA
		comp(s): NULL

This is the "munge kernel" function for ws_boundary__VERSIONLESS005:

process_1_VERSIONLESS005 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawdir = glue("data/{n}/{d}/raw/{p}/{s}", n = network, d = domain, 
        p = prodname_ms, s = site_code)
    file_path <- list.files(rawdir, full.names = TRUE)
    temp_path <- tempdir()
    zipped_files <- unzip(zipfile = file_path, exdir = temp_path, 
        overwrite = TRUE)
    projstring <- choose_projection(unprojected = TRUE)
    d <- sf::st_read(glue("{tp}/ws_boundary", tp = temp_path), 
        stringsAsFactors = FALSE, quiet = TRUE) %>% select(site_code = Huvudomr, 
        geometry = geometry) %>% mutate(site_code = paste0("Site", 
        site_code))
    single_sites <- d %>% filter(site_code %in% c("Site1", "Site2", 
        "Site3", "Site4", "Site5", "Site8", "Site10", "Site20", 
        "Site21", "Site22"))
    sites6 <- d %>% filter(site_code %in% c("Site6", "Site5")) %>% 
        sf::st_union() %>% sf::st_as_sf() %>% fill_sf_holes() %>% 
        mutate(site_code = "Site6") %>% rename(geometry = x)
    sites7 <- d %>% filter(site_code %in% c("Site7", "Site2", 
        "Site4")) %>% sf::st_union() %>% sf::st_as_sf() %>% fill_sf_holes() %>% 
        mutate(site_code = "Site7") %>% rename(geometry = x)
    sites9 <- d %>% filter(site_code %in% c("Site9", "Site6", 
        "Site2", "Site7", "Site4", "Site5")) %>% sf::st_union() %>% 
        sf::st_as_sf() %>% fill_sf_holes() %>% mutate(site_code = "Site9") %>% 
        rename(geometry = x)
    sites12 <- d %>% filter(site_code %in% c("Site12", "Site1", 
        "Site3", "Site10")) %>% sf::st_union() %>% sf::st_as_sf() %>% 
        fill_sf_holes() %>% mutate(site_code = "Site12") %>% 
        rename(geometry = x)
    sites13 <- d %>% filter(site_code %in% c("Site13", "Site8")) %>% 
        sf::st_union() %>% sf::st_as_sf() %>% mutate(site_code = "Site13") %>% 
        rename(geometry = x)
    sites14 <- d %>% filter(site_code %in% c("Site14", "Site21", 
        "Site20")) %>% sf::st_union() %>% sf::st_as_sf() %>% 
        mutate(site_code = "Site14") %>% rename(geometry = x)
    sites15 <- d %>% filter(site_code %in% c("Site15", "Site22")) %>% 
        sf::st_union() %>% sf::st_as_sf() %>% mutate(site_code = "Site15") %>% 
        rename(geometry = x)
    sites16 <- d %>% sf::st_union() %>% sf::st_as_sf() %>% mutate(site_code = "Site16") %>% 
        rename(geometry = x)
    all_sheds <- rbind(sites16, sites15, sites6, sites7, sites12, 
        sites13, sites14, sites9, single_sites) %>% sf::st_transform(., 
        crs = projstring)
    kry_gauges <- site_data %>% filter(network == "krycklan", 
        in_workflow == 1, site_type == "stream_gauge") %>% pull(site_code)
    all_sheds <- all_sheds %>% filter(site_code %in% !!kry_gauges)
    unlink(zipped_files)
    sites <- unique(all_sheds$site_code)
    for (s in 1:length(sites)) {
        d_site <- all_sheds %>% filter(site_code == !!sites[s])
        write_ms_file(d = d_site, network = network, domain = domain, 
            prodname_ms = prodname_ms, site_code = sites[s], 
            level = "munged", shapefile = TRUE)
    }
    return()
}

These were the arguments to that function:

network = 'krycklan'
domain = 'krycklan'
prodname_ms = 'ws_boundary__VERSIONLESS005'
site_code = <separately, each of: 'sitecode_NA', with corresponding component>
component(s) = 
	for site: sitecode_NA
		comp(s): NULL

This is the "munge kernel" function for precipitation__VERSIONLESS006:

process_1_VERSIONLESS006 <- function (network, domain, prodname_ms, site_code, component) 
{
    rawfile <- glue("data/{n}/{d}/raw/{p}/{s}", n = network, 
        d = domain, p = prodname_ms, s = site_code)
    rawfile <- list.files(rawfile, full.names = TRUE)
    d <- read_delim(rawfile, delim = ";", col_types = cols(.default = "c")) %>% 
        mutate(site = "Svartberget") %>% rename(precip = 2)
    d <- ms_read_raw_csv(preprocessed_tibble = d, datetime_cols = list(Datum = "%Y-%m-%d"), 
        datetime_tz = "Etc/GMT+2", site_code_col = "site", data_cols = c(precip = "precipitation"), 
        data_col_pattern = "#V#", is_sensor = TRUE)
    d <- ms_cast_and_reflag(d, varflag_col_pattern = NA)
    d <- qc_hdetlim_and_uncert(d, prodname_ms = prodname_ms)
    d <- synchronize_timestep(d)
    sites <- unique(d$site_code)
    for (s in 1:length(sites)) {
        d_site <- d %>% filter(site_code == !!sites[s])
        write_ms_file(d = d_site, network = network, domain = domain, 
            prodname_ms = prodname_ms, site_code = sites[s], 
            level = "munged", shapefile = FALSE)
    }
    return()
}

These were the arguments to that function:

network = 'krycklan'
domain = 'krycklan'
prodname_ms = 'precipitation__VERSIONLESS006'
site_code = <separately, each of: 'sitecode_NA', with corresponding component>
component(s) = 
	for site: sitecode_NA
		comp(s): NULL

---

Functions from external packages called inside the kernel function are either
referenced with `<package name>::<function>`, or are called from their aliases, defined in:

https://github.com/MacroSHEDS/data_processing/blob/master/src/function_aliases.R

For definitions of most MacroSheds functions called, see:

https://github.com/MacroSHEDS/data_processing/blob/master/src/global_helpers.R

Definitions not found there will be found in src/<network>/network_helpers.R or
src/<network>/<domain>/domain_helpers.R, where network is e.g. lter and domain
is e.g. hbef (Hubbard Brook Experimental Forest). For a catalogue of networks
and domains, download our site data table from the Data tab at macrosheds.org.

After all the kernels have completed their jobs, there is a whole suite of
post-processing steps, some of which further modify derived data. See
postprocess_entire_dataset() in global_helpers.R for a list of these.

Note that most MacroSheds functions are wrapped in a decorator function (handle_errors,
defined in global_helpers.R; see tinsel package for details). This decorator is not needed
to run the functions it wraps. To circumvent it, just make sure you don't load
function definitions using tinsel::source_decoratees. This would only happen if you
were to execute MacroSheds code line-by-line, starting from:

https://github.com/MacroSHEDS/data_processing/blob/master/src/acquisition_master.R

Also note that the return value of a munge kernel function may be additionally modified by
a munge engine function. Inside the body of the engine function, you can see where the
munge kernel is retrieved with get() and called via do.call(). Usually, the only additional munging
done by the munge engine (versus the munge kernel) would be to separate
a data file that contains many sites into individual data files of only one site each.
Munge engines are defined in:

https://github.com/MacroSHEDS/data_processing/blob/master/src/munge_engines.R

Finally, consider that you may clone our entire project from Github and get it running
on your own machine. Getting every component to run will require a file called config.json
at the top level of each project repository (data_processing/ and portal/) with your own
values instead of <...> for each of the following fields:

}
    "gmail_pw": "< >",
    "report_emails": ["<email1>", "<email2 etc>"],
    "variables_gsheet": "https://docs.google.com/spreadsheets/< >",
    "site_data_gsheet": "https://docs.google.com/spreadsheets/< >",
    "delineation_gsheet": "https://docs.google.com/spreadsheets/< >",
    "univ_prods_gsheet:": "https://docs.google.com/spreadsheets/< >",
    "name_variant_gsheet": "https://docs.google.com/spreadsheets/< >",
    "gee_login_<yourname>": "< >",
    "orcid_login_<yourname>": "< >",
    "orcid_pass_<yourname>": "< >",
}

Of course, you won't need connections to the ORCID database or google sheets in order to make headway.
For example, just set config_storage_location = 'local' in your call to ms_init in data_processing/src/acquisition_master.R
and gsheets becomes irrelevant. Our system is not fully set up to bypass the errors that would result from omitting
some of this config information, but workarounds (like commenting lines or inserting tryCatch blocks) should be
possible. This is something we'll be working on in later phases of the project.